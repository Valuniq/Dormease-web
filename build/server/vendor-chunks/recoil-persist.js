"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/recoil-persist";
exports.ids = ["vendor-chunks/recoil-persist"];
exports.modules = {

/***/ "(ssr)/./node_modules/recoil-persist/dist/index.js":
/*!***************************************************!*\
  !*** ./node_modules/recoil-persist/dist/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.recoilPersist = void 0;\n/**\n * Recoil module to persist state to storage\n *\n * @param config Optional configuration object\n * @param config.key Used as key in local storage, defaults to `recoil-persist`\n * @param config.storage Local storage to use, defaults to `localStorage`\n */\nconst recoilPersist = (config = {}) => {\n    if (typeof window === 'undefined') {\n        return {\n            persistAtom: () => { },\n        };\n    }\n    const { key = 'recoil-persist', storage = localStorage, converter = JSON } = config;\n    const persistAtom = ({ onSet, node, trigger, setSelf }) => {\n        if (trigger === 'get') {\n            const state = getState();\n            if (typeof state.then === 'function') {\n                state.then((s) => {\n                    if (s.hasOwnProperty(node.key)) {\n                        setSelf(s[node.key]);\n                    }\n                });\n            }\n            if (state.hasOwnProperty(node.key)) {\n                setSelf(state[node.key]);\n            }\n        }\n        onSet(async (newValue, _, isReset) => {\n            const state = getState();\n            if (typeof state.then === 'function') {\n                state.then((s) => updateState(newValue, s, node.key, isReset));\n            }\n            else {\n                updateState(newValue, state, node.key, isReset);\n            }\n        });\n    };\n    const updateState = (newValue, state, key, isReset) => {\n        if (isReset) {\n            delete state[key];\n        }\n        else {\n            state[key] = newValue;\n        }\n        setState(state);\n    };\n    const getState = () => {\n        const toParse = storage.getItem(key);\n        if (toParse === null || toParse === undefined) {\n            return {};\n        }\n        if (typeof toParse === 'string') {\n            return parseState(toParse);\n        }\n        if (typeof toParse.then === 'function') {\n            return toParse.then(parseState);\n        }\n        return {};\n    };\n    const parseState = (state) => {\n        if (state === undefined) {\n            return {};\n        }\n        try {\n            return converter.parse(state);\n        }\n        catch (e) {\n            console.error(e);\n            return {};\n        }\n    };\n    const setState = (state) => {\n        try {\n            if (typeof storage.mergeItem === 'function') {\n                storage.mergeItem(key, converter.stringify(state));\n            }\n            else {\n                storage.setItem(key, converter.stringify(state));\n            }\n        }\n        catch (e) {\n            console.error(e);\n        }\n    };\n    return { persistAtom };\n};\nexports.recoilPersist = recoilPersist;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVjb2lsLXBlcnNpc3QvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0EsWUFBWSxtRUFBbUU7QUFDL0UsMkJBQTJCLCtCQUErQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxxQkFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3JtZWFzZS13ZWIvLi9ub2RlX21vZHVsZXMvcmVjb2lsLXBlcnNpc3QvZGlzdC9pbmRleC5qcz8zZjgyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWNvaWxQZXJzaXN0ID0gdm9pZCAwO1xuLyoqXG4gKiBSZWNvaWwgbW9kdWxlIHRvIHBlcnNpc3Qgc3RhdGUgdG8gc3RvcmFnZVxuICpcbiAqIEBwYXJhbSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAqIEBwYXJhbSBjb25maWcua2V5IFVzZWQgYXMga2V5IGluIGxvY2FsIHN0b3JhZ2UsIGRlZmF1bHRzIHRvIGByZWNvaWwtcGVyc2lzdGBcbiAqIEBwYXJhbSBjb25maWcuc3RvcmFnZSBMb2NhbCBzdG9yYWdlIHRvIHVzZSwgZGVmYXVsdHMgdG8gYGxvY2FsU3RvcmFnZWBcbiAqL1xuY29uc3QgcmVjb2lsUGVyc2lzdCA9IChjb25maWcgPSB7fSkgPT4ge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGVyc2lzdEF0b206ICgpID0+IHsgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgeyBrZXkgPSAncmVjb2lsLXBlcnNpc3QnLCBzdG9yYWdlID0gbG9jYWxTdG9yYWdlLCBjb252ZXJ0ZXIgPSBKU09OIH0gPSBjb25maWc7XG4gICAgY29uc3QgcGVyc2lzdEF0b20gPSAoeyBvblNldCwgbm9kZSwgdHJpZ2dlciwgc2V0U2VsZiB9KSA9PiB7XG4gICAgICAgIGlmICh0cmlnZ2VyID09PSAnZ2V0Jykge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZS50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUudGhlbigocykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocy5oYXNPd25Qcm9wZXJ0eShub2RlLmtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFNlbGYoc1tub2RlLmtleV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGUuaGFzT3duUHJvcGVydHkobm9kZS5rZXkpKSB7XG4gICAgICAgICAgICAgICAgc2V0U2VsZihzdGF0ZVtub2RlLmtleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG9uU2V0KGFzeW5jIChuZXdWYWx1ZSwgXywgaXNSZXNldCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZS50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUudGhlbigocykgPT4gdXBkYXRlU3RhdGUobmV3VmFsdWUsIHMsIG5vZGUua2V5LCBpc1Jlc2V0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVTdGF0ZShuZXdWYWx1ZSwgc3RhdGUsIG5vZGUua2V5LCBpc1Jlc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCB1cGRhdGVTdGF0ZSA9IChuZXdWYWx1ZSwgc3RhdGUsIGtleSwgaXNSZXNldCkgPT4ge1xuICAgICAgICBpZiAoaXNSZXNldCkge1xuICAgICAgICAgICAgZGVsZXRlIHN0YXRlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZVtrZXldID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgc2V0U3RhdGUoc3RhdGUpO1xuICAgIH07XG4gICAgY29uc3QgZ2V0U3RhdGUgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRvUGFyc2UgPSBzdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgaWYgKHRvUGFyc2UgPT09IG51bGwgfHwgdG9QYXJzZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0b1BhcnNlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlU3RhdGUodG9QYXJzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0b1BhcnNlLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiB0b1BhcnNlLnRoZW4ocGFyc2VTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH07XG4gICAgY29uc3QgcGFyc2VTdGF0ZSA9IChzdGF0ZSkgPT4ge1xuICAgICAgICBpZiAoc3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gY29udmVydGVyLnBhcnNlKHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2V0U3RhdGUgPSAoc3RhdGUpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RvcmFnZS5tZXJnZUl0ZW0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBzdG9yYWdlLm1lcmdlSXRlbShrZXksIGNvbnZlcnRlci5zdHJpbmdpZnkoc3RhdGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0SXRlbShrZXksIGNvbnZlcnRlci5zdHJpbmdpZnkoc3RhdGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHsgcGVyc2lzdEF0b20gfTtcbn07XG5leHBvcnRzLnJlY29pbFBlcnNpc3QgPSByZWNvaWxQZXJzaXN0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/recoil-persist/dist/index.js\n");

/***/ })

};
;